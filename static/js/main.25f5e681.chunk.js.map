{"version":3,"sources":["ColorModeSwitcher.js","App.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","App","get_ul","rows","i","state","history","length","push","padding","get_button","buttons","numButton","_get_individual_button","fizzButton","buzzButton","fizzBuzzButton","spacing","isDisabled","buttonIsDisable","buttonNumber","content","button_click","get_status","status","h","as","isFullWidth","play","currentTime","end","paddingBottom","restart","get_instructions","allowToggle","pItem","count","setState","time","max_time","timerID","setInterval","tick","clearInterval","Array","fill","this","Math","floor","random","theme","p","borderRadius","templateColumns","minW","gap","justifySelf","w","rounded","class","React","Component","ReactDOM","render","document","getElementById"],"mappings":"gWAIaA,EAAoB,SAAAC,GAAU,IACjCC,EAAoBC,cAApBD,gBACFE,EAAOC,YAAkB,OAAQ,SACjCC,EAAaD,YAAkBE,IAAQC,KAE7C,OACE,cAAC,IAAD,aACEC,KAAK,KACLC,SAAS,KACTC,aAAA,oBAAyBP,EAAzB,SACAQ,QAAQ,UACRC,MAAM,UACNC,WAAW,IACXC,QAASb,EACTc,KAAM,cAACV,EAAD,KACFL,K,SC6LKgB,G,wDA7LX,WAAahB,GAAQ,IAAD,8BAChB,cAAMA,IAWViB,OAAS,WAEL,IADA,IAAIC,EAAO,GACFC,EAAE,EAAGA,EAAI,EAAKC,MAAMC,QAAQC,OAAQH,IACzCD,EAAKK,KAAK,cAAC,IAAD,UAAmB,EAAKH,MAAMC,QAAQF,IAAvBA,IAE7B,OAAO,cAAC,IAAD,CAAeK,QAAQ,IAAvB,SAA4BN,KAjBnB,EAoBpBO,WAAa,WACT,IAAIC,EAAU,GAEVC,EAAY,EAAKC,uBAAuB,EAAG,EAAKR,MAAMC,QAAQC,OAAS,GACvEO,EAAa,EAAKD,uBAAuB,EAAG,QAC5CE,EAAa,EAAKF,uBAAuB,EAAG,QAC5CG,EAAiB,EAAKH,uBAAuB,EAAG,YAIpD,OAFAF,EAAQH,KAAKI,EAAWE,EAAYC,EAAYC,GAEzC,cAAC,IAAD,CAAapB,QAAQ,QAAQqB,QAAQ,IAAIC,WAAY,EAAKb,MAAMc,gBAAhE,SAAkFR,KA9BzE,EAiCpBE,uBAAyB,SAACO,EAAcC,GACxC,OAAO,cAAC,IAAD,CAAQtB,QAAS,kBAAM,EAAKuB,aAAaF,IAAzC,SAAyDC,KAlC5C,EAqCpBE,WAAa,WACT,GAAyB,SAArB,EAAKlB,MAAMmB,OACX,MAAO,CACH,cAAC,IAAD,CAAQC,EAAE,OAAOhB,QAAQ,IAAzB,SAA6B,cAAC,IAAD,CAASiB,GAAG,KAAKjC,KAAK,KAAKI,MAAM,cAAjC,iCAC7B,eAAC,IAAD,CAAaD,QAAQ,QAAQqB,QAAQ,MAArC,UACI,cAAC,IAAD,CAAQU,aAAW,EAAC5B,QAAS,kBAAM,EAAK6B,KAAK,MAA7C,kBACA,cAAC,IAAD,CAAQD,aAAW,EAAC5B,QAAS,kBAAM,EAAK6B,KAAK,OAA7C,oBACA,cAAC,IAAD,CAAQD,aAAW,EAAC5B,QAAS,kBAAM,EAAK6B,KAAK,MAA7C,kBACA,cAAC,IAAD,CAAQD,aAAW,EAAC5B,QAAS,kBAAM,EAAK6B,KAAK,MAA7C,yBAGH,GAAyB,QAArB,EAAKvB,MAAMmB,QAAyC,SAArB,EAAKnB,MAAMmB,OAAmB,CACtE,IAAIpC,EAA6B,QAArB,EAAKiB,MAAMmB,OAAmB,UAAY,iCAEtD,GAAI,EAAKnB,MAAMwB,YAAc,EACzB,MAAO,CACH,cAAC,IAAD,CAAQJ,EAAE,OAAOhB,QAAQ,IAAzB,SAA6B,cAAC,IAAD,CAASiB,GAAG,KAAKjC,KAAK,KAAKI,MAAM,cAAjC,SAAgDT,MAC7E,cAAC,IAAD,CAAQqC,EAAE,OAAOhB,QAAQ,IAAzB,SAA6B,eAAC,IAAD,WAAU,EAAKJ,MAAMwB,YAArB,WAGjC,EAAKC,WAGJ,GAAyB,QAArB,EAAKzB,MAAMmB,OACpB,MAAO,CACH,cAAC,IAAD,CAASE,GAAG,KAAKjC,KAAK,KAAKI,MAAM,cAAckC,cAAc,MAA7D,iCACA,eAAC,IAAD,CAASL,GAAG,KAAKjC,KAAK,KAAKI,MAAM,cAAckC,cAAc,MAA7D,oBAA2E,EAAK1B,MAAMC,QAAQC,UAC9F,cAAC,IAAD,CAAQR,QAAS,kBAAM,EAAKiC,WAA5B,uBAhEQ,EAqEpBC,iBAAmB,WACf,MAAQ,CACJ,cAAC,IAAD,CAAWC,aAAW,EAAtB,SACI,eAAC,IAAD,WACI,6BACI,eAAC,IAAD,WACI,cAAC,IAAD,2BACA,cAAC,IAAD,SAGR,cAAC,IAAD,UACI,eAAC,IAAD,WACI,cAAC,IAAD,6DACA,cAAC,IAAD,2DACA,cAAC,IAAD,2DACA,cAAC,IAAD,uFApFJ,EA4FpBZ,aAAe,SAACF,GACZ,IAAIe,EAAQ,GACRC,EAAQ,EAAK/B,MAAMC,QAAQC,OAAS,EAEpC6B,EAAQ,IAAM,EACM,GAAhBhB,IACAe,EAAQ,YAELC,EAAQ,GAAK,EACA,GAAhBhB,IACAe,EAAQ,QAELC,EAAQ,GAAK,EACA,GAAhBhB,IACAe,EAAQ,QAEW,GAAhBf,IACPe,EAAQC,GAGa,QAArB,EAAK/B,MAAMmB,QAAyC,SAArB,EAAKnB,MAAMmB,SAC7B,IAATW,GACA,EAAK9B,MAAMC,QAAQE,KAAK2B,GACxB,EAAKE,SAAS,CACVb,OAAQ,OACRlB,QAAS,EAAKD,MAAMC,QACpBuB,YAAa,EAAKxB,MAAMiC,QAG5B,EAAKR,QAzHG,EA+HpBF,KAAO,SAACW,GACJ,EAAKF,SAAS,CACVb,OAAQ,QACRL,iBAAiB,EACjBmB,KAAMC,EACNV,YAAaU,IAEjB,EAAKC,QAAUC,aACX,kBAAM,EAAKC,SACX,KAxIY,EAsJpBZ,IAAM,WACF,EAAKO,SAAS,CACVb,OAAQ,OACRL,iBAAiB,IAErBwB,cAAc,EAAKH,UA3JH,EA8JpBR,QAAU,WACN,EAAKK,SAAS,CACV/B,QAAS,GACTkB,OAAQ,WA/JZ,EAAKnB,MAAQ,CAETC,QAAS,IAAIsC,MAAM,IAAIC,KAAK,KAC5BrB,OAAQ,QACRL,iBAAiB,EACjBmB,KAAM,EACNT,YAAa,GARD,E,wCA4IpB,WAC6B,QAArBiB,KAAKzC,MAAMmB,QACXsB,KAAKT,SAAS,CACVR,YAAaiB,KAAKzC,MAAMwB,YAAc,IAAMkB,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAM,IAAM,O,oBAsBpG,WACI,OACA,cAAC,IAAD,CAAgBE,MAAOA,QAAvB,SACI,eAAC,IAAD,CAAQjC,QAAS,EAAGkC,EAAG,EAAGC,aAAa,KAAvC,UAEI,eAAC,IAAD,CAAMC,gBAAgB,iBAAiBC,KAAK,QAAQC,IAAK,GAAzD,UACI,cAAC,IAAD,CAAQ9B,EAAE,OAAV,SAAiB,cAAC,IAAD,CAASC,GAAG,KAAKjC,KAAK,KAAKI,MAAM,cAAckC,cAAc,MAA7D,6BACjB,cAAC,IAAD,CAAQN,EAAE,OAAV,SAAiB,cAAC,EAAD,CAAmB+B,YAAY,kBAGnDV,KAAKpC,aAEN,cAAC,IAAD,CAAK+C,EAAE,MAAMhC,EAAE,OAAOiC,QAAQ,MAAMjD,QAAQ,MAA5C,SAAkD,qBAAKkD,MAAM,eAAX,SAA2Bb,KAAK5C,aAEjF4C,KAAKvB,aAELuB,KAAKb,4B,GAtLJ2B,IAAMC,YCbxBC,IAASC,OACP,eAAC,aAAD,WACE,cAAC,IAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.25f5e681.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"outline\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import React from 'react';\r\nimport {ChakraProvider, Box, Text, VStack, Grid, theme,} from '@chakra-ui/react';\r\nimport {ListItem, UnorderedList, OrderedList} from \"@chakra-ui/react\"\r\nimport {ButtonGroup, Button, Heading } from \"@chakra-ui/react\"\r\nimport {Center} from \"@chakra-ui/react\"\r\n\r\nimport {ColorModeSwitcher} from './ColorModeSwitcher';\r\n\r\nimport {\r\n    Accordion,\r\n    AccordionItem,\r\n    AccordionButton,\r\n    AccordionPanel,\r\n    AccordionIcon,\r\n  } from \"@chakra-ui/react\"\r\n\r\nimport \"./custom.css\"\r\n\r\nclass App extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            // history: [],\r\n            history: new Array(50).fill('1'),\r\n            status: \"start\",\r\n            buttonIsDisable: true,\r\n            time: 0,\r\n            currentTime: 0\r\n        };\r\n    }\r\n\r\n    get_ul = () => {\r\n        var rows = [];\r\n        for (var i=0; i < this.state.history.length; i++) {\r\n            rows.push(<ListItem key={i}>{this.state.history[i]}</ListItem>);\r\n        }\r\n        return <UnorderedList padding='4'>{rows}</UnorderedList>;\r\n    }\r\n\r\n    get_button = () => {\r\n        var buttons = [];\r\n\r\n        let numButton = this._get_individual_button(1, this.state.history.length + 1);\r\n        let fizzButton = this._get_individual_button(2, \"Fizz\");\r\n        let buzzButton = this._get_individual_button(3, \"Buzz\");\r\n        let fizzBuzzButton = this._get_individual_button(4, \"FizzBuzz\");\r\n\r\n        buttons.push(numButton, fizzButton, buzzButton, fizzBuzzButton);\r\n\r\n        return <ButtonGroup variant=\"solid\" spacing=\"6\" isDisabled={this.state.buttonIsDisable}>{buttons}</ButtonGroup>;\r\n    }\r\n\r\n    _get_individual_button = (buttonNumber, content) => {\r\n    return <Button onClick={() => this.button_click(buttonNumber)}>{content}</Button>\r\n    }\r\n\r\n    get_status = () => {\r\n        if (this.state.status == \"start\") {\r\n            return [\r\n                <Center h=\"100%\" padding=\"2\"><Heading as=\"h1\" size=\"md\" color=\"primary.900\">SELECT DIFFICULTY</Heading></Center>,\r\n                <ButtonGroup variant=\"solid\" spacing=\"1vw\">\r\n                    <Button isFullWidth onClick={() => this.play(5000)}>easy</Button>\r\n                    <Button isFullWidth onClick={() => this.play(2500)}>medium</Button>\r\n                    <Button isFullWidth onClick={() => this.play(1000)}>hard</Button>\r\n                    <Button isFullWidth onClick={() => this.play(500)}>extreme</Button>\r\n                </ButtonGroup>\r\n            ]\r\n        }   else if (this.state.status == \"play\" || this.state.status == \"pause\") {\r\n            let text = (this.state.status == \"play\" ? \"PLAYING\" : \"PAUSED, press buttons to start\");\r\n\r\n            if (this.state.currentTime > 0) {\r\n                return [\r\n                    <Center h=\"100%\" padding=\"2\"><Heading as=\"h1\" size=\"md\" color=\"primary.900\">{text}</Heading></Center>,\r\n                    <Center h=\"100%\" padding=\"2\"><Heading>{this.state.currentTime}ms</Heading></Center>\r\n                ]\r\n            } else {\r\n                this.end();\r\n            }\r\n\r\n        }   else if (this.state.status == \"done\") {\r\n            return [\r\n                <Heading as=\"h1\" size=\"md\" color=\"primary.900\" paddingBottom=\"1vh\">YOU JUST GOT BUZZED</Heading>,\r\n                <Heading as=\"h2\" size=\"md\" color=\"primary.900\" paddingBottom=\"1vh\">SCORE: {this.state.history.length}</Heading>,\r\n                <Button onClick={() => this.restart()}>RESTART</Button>\r\n            ]\r\n        }\r\n    }\r\n\r\n    get_instructions = () => {\r\n        return  [\r\n            <Accordion allowToggle>\r\n                <AccordionItem>\r\n                    <h2>\r\n                        <AccordionButton>\r\n                            <Box>INSTRUCTIONS</Box>\r\n                            <AccordionIcon />\r\n                        </AccordionButton>\r\n                    </h2>\r\n                    <AccordionPanel>\r\n                        <OrderedList>\r\n                            <ListItem>Click the number button to count incrementally</ListItem>\r\n                            <ListItem>Click 'Fizz' if the number is divisible by 3</ListItem>\r\n                            <ListItem>Click 'Buzz' if the number is divisible by 5</ListItem>\r\n                            <ListItem>Click 'FizzBuzz' if the number is divisible by both 3 and 5!</ListItem>\r\n                        </OrderedList>\r\n                    </AccordionPanel>\r\n                </AccordionItem>\r\n            </Accordion>\r\n        ]\r\n    }\r\n\r\n    button_click = (buttonNumber) => {\r\n        var pItem = '';\r\n        var count = this.state.history.length + 1\r\n\r\n        if (count % 15 == 0) {\r\n            if (buttonNumber == 4) {\r\n                pItem = 'FizzBuzz';\r\n            }\r\n        } else if (count % 5 == 0) {\r\n            if (buttonNumber == 3) {\r\n                pItem = 'Buzz';\r\n            }\r\n        } else if (count % 3 == 0) {\r\n            if (buttonNumber == 2) {\r\n                pItem = 'Fizz';\r\n            }\r\n        } else if (buttonNumber == 1) {\r\n            pItem = count;\r\n        }\r\n\r\n        if (this.state.status == \"play\" || this.state.status == \"pause\") {\r\n            if (pItem != '') {\r\n                this.state.history.push(pItem);\r\n                this.setState({\r\n                    status: \"play\",\r\n                    history: this.state.history,\r\n                    currentTime: this.state.time,\r\n                });\r\n            } else {\r\n                this.end();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    play = (max_time) => {\r\n        this.setState({\r\n            status: \"pause\", // start paused\r\n            buttonIsDisable: false,\r\n            time: max_time,\r\n            currentTime: max_time\r\n        });\r\n        this.timerID = setInterval(\r\n            () => this.tick(),\r\n            10\r\n        );\r\n    }\r\n\r\n    tick() {\r\n        if (this.state.status == 'play') {\r\n            this.setState({\r\n                currentTime: this.state.currentTime - 10 + (Math.floor(Math.random() * Math.floor(4)) - 2)\r\n                // that math floor thing is random int between -2 and 2\r\n                // so that it changes the smallest digit and looks more legit lmao, it averages out anyway\r\n            });\r\n        }\r\n    }\r\n\r\n    end = () => {\r\n        this.setState({\r\n            status: \"done\",\r\n            buttonIsDisable: true,\r\n        });\r\n        clearInterval(this.timerID);\r\n    }\r\n\r\n    restart = () => {\r\n        this.setState({\r\n            history: [],\r\n            status: \"start\"\r\n        });\r\n    }\r\n\r\n    render () {\r\n        return (\r\n        <ChakraProvider theme={theme}>\r\n            <VStack spacing={4} p={2} borderRadius=\"lg\">\r\n\r\n                <Grid templateColumns=\"repeat(2, 1fr)\" minW=\"100vw\" gap={10}>\r\n                    <Center h=\"100%\"><Heading as=\"h1\" size=\"md\" color=\"primary.900\" paddingBottom=\"1vh\">FizzBuzz game</Heading></Center>\r\n                    <Center h=\"100%\"><ColorModeSwitcher justifySelf=\"flex-end\"/></Center>\r\n                </Grid>\r\n\r\n                {this.get_button()}\r\n\r\n                <Box w=\"90%\" h=\"50vh\" rounded=\"2xl\" padding=\"5px\"><div class=\"overflowList\">{this.get_ul()}</div></Box>\r\n\r\n                {this.get_status()}\r\n\r\n                {this.get_instructions()}\r\n\r\n            </VStack>\r\n        </ChakraProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import { ColorModeScript } from '@chakra-ui/react';\r\nimport React, { StrictMode } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <StrictMode>\r\n    <ColorModeScript />\r\n    <App />\r\n  </StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}