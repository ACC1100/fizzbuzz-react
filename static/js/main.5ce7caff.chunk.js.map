{"version":3,"sources":["ColorModeSwitcher.js","App.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","App","get_ul","rows","i","state","history","length","push","padding","get_button","buttons","numButton","_get_individual_button","fizzButton","buzzButton","fizzBuzzButton","spacing","buttonNumber","content","button_click","get_status","status","as","paddingBottom","isFullWidth","restart","pItem","count","setState","theme","p","borderRadius","templateColumns","minW","gap","h","justifySelf","this","w","rounded","class","className","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ce7caff.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"outline\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import React from 'react';\nimport {ChakraProvider, Box, Text, VStack, Grid, theme,} from '@chakra-ui/react';\nimport {ListItem, UnorderedList } from \"@chakra-ui/react\"\nimport {ButtonGroup, Button, Heading } from \"@chakra-ui/react\"\nimport { Center} from \"@chakra-ui/react\"\n\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\n\nimport \"./custom.css\"\n\nclass App extends React.Component {\n  constructor (props) {\n      super(props);\n      this.state = {\n          history: [],\n          status: true,\n      };\n  }\n\n  get_ul = () => {\n      var rows = [];\n      for (var i=0; i < this.state.history.length; i++) {\n          rows.push(<ListItem key={i}>{this.state.history[i]}</ListItem>);\n      }\n      return <UnorderedList padding='4'>{rows}</UnorderedList>;\n  }\n\n  get_button = () => {\n      var buttons = [];\n      \n      let numButton = this._get_individual_button(1, this.state.history.length + 1);\n      let fizzButton = this._get_individual_button(2, \"Fizz\");\n      let buzzButton = this._get_individual_button(3, \"Buzz\");\n      let fizzBuzzButton = this._get_individual_button(4, \"FizzBuzz\");\n\n      buttons.push(numButton, fizzButton, buzzButton, fizzBuzzButton);\n      // buttons.push(<ColorModeSwitcher justifySelf=\"flex-end\"/>)\n\n      return <ButtonGroup variant=\"solid\" spacing=\"6\">{buttons}</ButtonGroup>;\n  }\n\n  _get_individual_button = (buttonNumber, content) => {\n    return <Button onClick={() => this.button_click(buttonNumber)}>{content}</Button>\n  }\n\n  get_status = () => {\n      if (this.state.status == true) {\n          return <Heading as=\"h1\" size=\"md\" color=\"primary.900\">PLAYING</Heading >\n      }   else {\n          return [<Heading as=\"h1\" size=\"md\" color=\"primary.900\" paddingBottom=\"20px\">YOU JUST GOT BUZZED</Heading>, <Button isFullWidth onClick={() => this.restart()}>RESTART</Button>]\n      }\n  }\n\n  button_click = (buttonNumber) => {\n      var pItem = '';\n      var count = this.state.history.length + 1\n\n\n      if (count % 15 == 0) {\n          if (buttonNumber == 4) {\n              pItem = 'FizzBuzz';\n          }\n      } else if (count % 5 == 0) {\n          if (buttonNumber == 3) {\n              pItem = 'Buzz';\n          }\n      } else if (count % 3 == 0) {\n          if (buttonNumber == 2) {\n              pItem = 'Fizz';\n          }\n      } else if (buttonNumber == 1) {\n          pItem = count;\n      }\n\n      if (this.state.status == true) {\n          if (pItem != '') {\n              this.state.history.push(pItem);\n              this.setState({\n                  history: this.state.history\n              });\n          } else {\n              pItem = 'WRONG'\n              this.state.history.push(pItem);\n              this.setState({\n                  history: this.state.history,\n                  status: false\n              });\n          }\n      }\n\n  }\n\n  restart = () => {\n      this.setState({\n          history: [],\n          status: true\n      });\n  }\n\n  render () {\n      \n      return (\n        <ChakraProvider theme={theme}>\n            \n            <VStack spacing={4} p={2} borderRadius=\"lg\">\n\n              <Grid templateColumns=\"repeat(2, 1fr)\" minW=\"100vw\" gap={10}>\n                <Center h=\"100%\"><Heading as=\"h1\" size=\"md\" color=\"primary.900\" paddingBottom=\"20px\">FizzBuzz game</Heading></Center>\n                <Center h=\"100%\"><ColorModeSwitcher justifySelf=\"flex-end\"/></Center>\n              </Grid>\n            \n              {this.get_button()}\n\n              <Box w=\"80%\" h=\"50vh\" rounded=\"2xl\" padding=\"50\"><div class=\"overflowList\">{this.get_ul()}</div></Box> \n              \n              <div className=\"center\">\n                  {this.get_status()}\n              </div>\n\n            </VStack>\n        </ChakraProvider>\n      );\n  }\n}\n\nexport default App;","import { ColorModeScript } from '@chakra-ui/react';\r\nimport React, { StrictMode } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <StrictMode>\r\n    <ColorModeScript />\r\n    <App />\r\n  </StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}