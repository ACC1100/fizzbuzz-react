{"version":3,"sources":["ColorModeSwitcher.js","TrailingHistory.js","App.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","aria-label","variant","color","marginLeft","onClick","icon","TrailingHistory","boxList","bg","history","length","push","play","start","transform","end","w","maxWidth","h","rounded","visibility","spacing","overflow","App","get_ul","rows","i","state","padding","get_button","buttons","numButton","_get_individual_button","count","fizzButton","buzzButton","fizzBuzzButton","isDisabled","buttonIsDisable","buttonNumber","content","button_click","get_status","status","as","isFullWidth","currentTime","paddingBottom","restart","get_instructions","allowToggle","pItem","setState","time","max_time","timerID","setInterval","tick","clearInterval","this","Math","floor","random","theme","p","borderRadius","templateColumns","minW","gap","justifySelf","slice","reverse","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5d81cc6e.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"outline\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import React from 'react';\nimport { Text, HStack, Box, Center} from '@chakra-ui/react';\nimport { ColorModeScript, useColorMode, useColorModeValue } from \"@chakra-ui/react\"\n\nimport { Animate }  from 'react-simple-animate';\n\nexport function TrailingHistory(props) {\n    var boxList = []\n    const { toggleColorMode } = useColorMode()\n\n    const bg = useColorModeValue(\"gray.100\", \"gray.700\")\n    const color = useColorModeValue(\"black\", \"white\")\n\n    // EMPTY BOX PUSHES ARE USED FOR POSITION PURPOSES\n    \n    // LEFT BOX\n    if (props.history.length >= 2) {\n        boxList.push(\n            <Animate \n                play={true}\n                start={{transform: \"translateX(40vw) scale(2, 1.5)\"}}\n                end={{transform: \"translateX(0px) scale(1, 1)\"}}\n                // duration={0.2}\n                key=\"left\"\n            >\n                <Box w=\"20vw\" maxWidth=\"200px\" h=\"20vh\" bg={bg} color={color} rounded=\"xl\" key=\"left2\">\n                    <Center h=\"100%\"><Text fontSize=\"4xl\">{props.history[1]}</Text></Center>\n                </Box>\n            </Animate>\n        )\n    }   else {\n        boxList.push(\n            <Box visibility=\"hidden\" w=\"20vw\" h=\"20vh\" maxWidth=\"200px\" key=\"left2\"/>\n        )\n    }\n\n\n    if (props.history.length >= 1) {\n        // MAIN BOX\n        boxList.push(\n            <Animate\n                play={true}\n                start={{transform: \"translateX(40vw) scale(0.5, 0.66)\"}}\n                end={{transform: \"translateX(0px) scale(1, 1)\"}}\n                // duration={0.2}\n                key=\"mid\"\n            >\n                <Center>\n                    <Box w=\"40vw\" maxWidth=\"400px\" h=\"30vh\" bg={bg} color={color} rounded=\"xl\" key=\"mid2\">\n                        <Center h=\"100%\"><Text fontSize=\"6xl\">{props.history[0]}</Text></Center>\n                    </Box>\n                </Center>\n            </Animate>\n        )\n    }   else {\n        boxList.push(\n            <Center>\n                <Box visibility=\"hidden\" w=\"40vw\" h=\"30vh\" maxWidth=\"400px\" key=\"mid2\"/>\n            </Center>\n        )\n    }\n\n    if (props.history.length >= 0) {\n        // RIGHT BOX\n        boxList.push(\n            <Animate \n                play={true}\n                start={{transform: \"translateX(20vw) scale(0.5, 0.66)\"}}\n                end={{transform: \"translateX(0px) scale(1, 1)\"}}\n                // duration={0.2}\n                key=\"right\"\n            >\n                <Box w=\"20vw\" maxWidth=\"200px\" h=\"20vh\" bg={bg} color={color} rounded=\"xl\" key=\"right2\"/>\n            </Animate>\n        )\n    }\n\n\n    return (\n        // YOOOO, HAVE UNIQUE KEY TO FORCE RE RENDER\n        <HStack spacing=\"4vw\" key={props.history[0]} overflow=\"hidden\">\n            {boxList}\n        </HStack>\n    )\n}\n\n\nexport default TrailingHistory;","import React from 'react';\nimport {ChakraProvider, Box, Text, VStack, Grid, theme,} from '@chakra-ui/react';\nimport {ListItem, UnorderedList, OrderedList} from \"@chakra-ui/react\"\nimport {ButtonGroup, Button, Heading } from \"@chakra-ui/react\"\nimport {Center} from \"@chakra-ui/react\"\n\nimport {ColorModeSwitcher} from './ColorModeSwitcher';\nimport {TrailingHistory} from './TrailingHistory';\n\n\nimport {\n    Accordion,\n    AccordionItem,\n    AccordionButton,\n    AccordionPanel,\n    AccordionIcon,\n  } from \"@chakra-ui/react\"\n\nimport \"./custom.css\"\n\n\nclass App extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            history: [],\n            // history: new Array(27).fill('0'), // test for automatically filling history\n            count: 1,\n            status: \"start\",\n            buttonIsDisable: true,\n            time: 0,\n            currentTime: 0,\n        };\n    }\n\n    get_ul = () => {\n        var rows = [];\n        for (var i=0; i < this.state.history.length; i++) {\n            rows.push(<ListItem key={i}>{this.state.history[i]}</ListItem>);\n        }\n        return <UnorderedList padding='4'>{rows}</UnorderedList>;\n    }\n\n    get_button = () => {\n        var buttons = [];\n\n        let numButton = this._get_individual_button(1, this.state.count);\n        let fizzButton = this._get_individual_button(2, \"Fizz\");\n        let buzzButton = this._get_individual_button(3, \"Buzz\");\n        let fizzBuzzButton = this._get_individual_button(4, \"FizzBuzz\");\n\n        buttons.push(numButton, fizzButton, buzzButton, fizzBuzzButton);\n\n        return <ButtonGroup variant=\"solid\" spacing=\"6\" isDisabled={this.state.buttonIsDisable}>{buttons}</ButtonGroup>;\n    }\n\n    _get_individual_button = (buttonNumber, content) => {\n    return <Button onClick={() => this.button_click(buttonNumber)}>{content}</Button>\n    }\n\n    get_status = () => {\n        if (this.state.status == \"start\") {\n            return [\n                <Center h=\"100%\" padding=\"2\"><Heading as=\"h1\" size=\"md\" color=\"primary.900\">SELECT DIFFICULTY</Heading></Center>,\n                <ButtonGroup variant=\"solid\" spacing=\"1vw\">\n                    <Button isFullWidth onClick={() => this.play(5000)}>easy</Button>\n                    <Button isFullWidth onClick={() => this.play(2500)}>medium</Button>\n                    <Button isFullWidth onClick={() => this.play(1000)}>hard</Button>\n                    <Button isFullWidth onClick={() => this.play(500)}>extreme</Button>\n                </ButtonGroup>\n            ]\n        }   else if (this.state.status == \"play\" || this.state.status == \"pause\") {\n            let text = (this.state.status == \"play\" ? \"PLAYING\" : \"PAUSED, press buttons to start\");\n\n            if (this.state.currentTime > 0) {\n                return [\n                    <Center h=\"100%\" padding=\"2\"><Heading as=\"h1\" size=\"md\" color=\"primary.900\">{text}</Heading></Center>,\n                    <Center h=\"100%\" padding=\"2\"><Heading>{this.state.currentTime}ms</Heading></Center>\n                ]\n            } else {\n                this.end();\n            }\n\n        }   else if (this.state.status == \"done\") {\n            return [\n                <Heading as=\"h1\" size=\"md\" color=\"primary.900\" paddingBottom=\"1vh\">YOU JUST GOT BUZZED</Heading>,\n                <Heading as=\"h2\" size=\"md\" color=\"primary.900\" paddingBottom=\"1vh\">SCORE: {this.state.history.length}</Heading>,\n                <Button onClick={() => this.restart()}>RESTART</Button>\n            ]\n        }\n    }\n\n    get_instructions = () => {\n        return  [\n            <Accordion allowToggle>\n                <AccordionItem>\n                    <h2>\n                        <AccordionButton>\n                            <Box>INSTRUCTIONS</Box>\n                            <AccordionIcon />\n                        </AccordionButton>\n                    </h2>\n                    <AccordionPanel>\n                        <OrderedList>\n                            <ListItem>Click the number button to count incrementally</ListItem>\n                            <ListItem>Click 'Fizz' if the number is divisible by 3</ListItem>\n                            <ListItem>Click 'Buzz' if the number is divisible by 5</ListItem>\n                            <ListItem>Click 'FizzBuzz' if the number is divisible by both 3 and 5!</ListItem>\n                        </OrderedList>\n                    </AccordionPanel>\n                </AccordionItem>\n            </Accordion>\n        ]\n    }\n\n    button_click = (buttonNumber) => {\n        var pItem = '';\n\n        if (this.state.count % 15 == 0) {\n            if (buttonNumber == 4) {\n                pItem = 'FizzBuzz';\n            }\n        } else if (this.state.count % 5 == 0) {\n            if (buttonNumber == 3) {\n                pItem = 'Buzz';\n            }\n        } else if (this.state.count % 3 == 0) {\n            if (buttonNumber == 2) {\n                pItem = 'Fizz';\n            }\n        } else if (buttonNumber == 1) {\n            pItem = this.state.count;\n        }\n\n        // pItem = Math.random()\n\n        if (this.state.status == \"play\" || this.state.status == \"pause\") {\n            if (pItem != '') {\n                this.state.history.push(pItem);\n                this.setState({\n                    status: \"play\",\n                    history: this.state.history,\n                    currentTime: this.state.time,\n                    count: this.state.count + 1\n                });\n            } else {\n                this.end();\n            }\n        }\n\n    }\n\n    play = (max_time) => {\n        this.setState({\n            status: \"pause\", // start paused\n            buttonIsDisable: false,\n            time: max_time,\n            currentTime: max_time\n        });\n        this.timerID = setInterval(\n            () => this.tick(),\n            10\n        );\n    }\n\n    tick() {\n        if (this.state.status == 'play') {\n            this.setState({\n                currentTime: this.state.currentTime - 10 + (Math.floor(Math.random() * Math.floor(4)) - 2)\n                // that math floor thing is random int between -2 and 2\n                // so that it changes the smallest digit and looks more legit lmao, it averages out anyway\n            });\n        }\n    }\n\n    end = () => {\n        this.setState({\n            status: \"done\",\n            buttonIsDisable: true,\n        });\n        clearInterval(this.timerID);\n    }\n\n    restart = () => {\n        this.setState({\n            history: [],\n            count: 1,\n            status: \"start\"\n        });\n    }\n\n    render () {\n        // console.log(this.state.history.slice(-2).reverse())\n        return (\n        <ChakraProvider theme={theme}>\n            <VStack spacing={4} p={2} borderRadius=\"lg\">\n\n                <Grid templateColumns=\"repeat(2, 1fr)\" minW=\"100vw\" gap={10}>\n                    <Center h=\"100%\"><Heading as=\"h1\" size=\"md\" color=\"primary.900\" paddingBottom=\"1vh\">FizzBuzz game</Heading></Center>\n                    <Center h=\"100%\"><ColorModeSwitcher justifySelf=\"flex-end\"/></Center>\n                </Grid>\n\n                {this.get_button()}\n\n                <TrailingHistory history={this.state.history.slice(-3).reverse()}/>\n\n                {this.get_status()}\n\n                {this.get_instructions()}\n\n            </VStack>\n        </ChakraProvider>\n        );\n    }\n}\n\nexport default App;","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}